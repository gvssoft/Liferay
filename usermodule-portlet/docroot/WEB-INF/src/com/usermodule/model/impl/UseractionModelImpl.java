/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.usermodule.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.usermodule.model.Useraction;
import com.usermodule.model.UseractionModel;
import com.usermodule.model.UseractionSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Useraction service. Represents a row in the &quot;usermodule_Useraction&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.usermodule.model.UseractionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UseractionImpl}.
 * </p>
 *
 * @author admin
 * @see UseractionImpl
 * @see com.usermodule.model.Useraction
 * @see com.usermodule.model.UseractionModel
 * @generated
 */
@JSON(strict = true)
public class UseractionModelImpl extends BaseModelImpl<Useraction>
	implements UseractionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a useraction model instance should use the {@link com.usermodule.model.Useraction} interface instead.
	 */
	public static final String TABLE_NAME = "usermodule_Useraction";
	public static final Object[][] TABLE_COLUMNS = {
			{ "userActionId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "userclickaction", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table usermodule_Useraction (userActionId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,userclickaction VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table usermodule_Useraction";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.usermodule.model.Useraction"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.usermodule.model.Useraction"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Useraction toModel(UseractionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Useraction model = new UseractionImpl();

		model.setUserActionId(soapModel.getUserActionId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setUserclickaction(soapModel.getUserclickaction());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Useraction> toModels(UseractionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Useraction> models = new ArrayList<Useraction>(soapModels.length);

		for (UseractionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.usermodule.model.Useraction"));

	public UseractionModelImpl() {
	}

	public long getPrimaryKey() {
		return _userActionId;
	}

	public void setPrimaryKey(long primaryKey) {
		setUserActionId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_userActionId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Useraction.class;
	}

	public String getModelClassName() {
		return Useraction.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("userActionId", getUserActionId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("userclickaction", getUserclickaction());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long userActionId = (Long)attributes.get("userActionId");

		if (userActionId != null) {
			setUserActionId(userActionId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String userclickaction = (String)attributes.get("userclickaction");

		if (userclickaction != null) {
			setUserclickaction(userclickaction);
		}
	}

	@JSON
	public long getUserActionId() {
		return _userActionId;
	}

	public void setUserActionId(long userActionId) {
		_userActionId = userActionId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public String getUserclickaction() {
		if (_userclickaction == null) {
			return StringPool.BLANK;
		}
		else {
			return _userclickaction;
		}
	}

	public void setUserclickaction(String userclickaction) {
		_userclickaction = userclickaction;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Useraction.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Useraction toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Useraction)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		UseractionImpl useractionImpl = new UseractionImpl();

		useractionImpl.setUserActionId(getUserActionId());
		useractionImpl.setCompanyId(getCompanyId());
		useractionImpl.setUserId(getUserId());
		useractionImpl.setUserName(getUserName());
		useractionImpl.setCreateDate(getCreateDate());
		useractionImpl.setModifiedDate(getModifiedDate());
		useractionImpl.setUserclickaction(getUserclickaction());

		useractionImpl.resetOriginalValues();

		return useractionImpl;
	}

	public int compareTo(Useraction useraction) {
		long primaryKey = useraction.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Useraction useraction = null;

		try {
			useraction = (Useraction)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = useraction.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Useraction> toCacheModel() {
		UseractionCacheModel useractionCacheModel = new UseractionCacheModel();

		useractionCacheModel.userActionId = getUserActionId();

		useractionCacheModel.companyId = getCompanyId();

		useractionCacheModel.userId = getUserId();

		useractionCacheModel.userName = getUserName();

		String userName = useractionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			useractionCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			useractionCacheModel.createDate = createDate.getTime();
		}
		else {
			useractionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			useractionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			useractionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		useractionCacheModel.userclickaction = getUserclickaction();

		String userclickaction = useractionCacheModel.userclickaction;

		if ((userclickaction != null) && (userclickaction.length() == 0)) {
			useractionCacheModel.userclickaction = null;
		}

		return useractionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{userActionId=");
		sb.append(getUserActionId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", userclickaction=");
		sb.append(getUserclickaction());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.usermodule.model.Useraction");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>userActionId</column-name><column-value><![CDATA[");
		sb.append(getUserActionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userclickaction</column-name><column-value><![CDATA[");
		sb.append(getUserclickaction());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Useraction.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Useraction.class
		};
	private long _userActionId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _userclickaction;
	private Useraction _escapedModelProxy;
}